<?phpif(!defined('BASEPATH')) exit('No direct script access allowed');require APPPATH . '/libraries/BaseController.php';class Verification extends BaseController{	/**	 * This is default constructor of the class	 */	public function __construct()	{		parent::__construct();		$this->load->model('User_model', 'user');		$this->load->library('googleAuthenticator');	}	public function index(){		$email 	= $this->session->userdata('email');		$data['email'] = $email;		$data['term'] = $this->term;		$this->load->view('verification', $data);	}		public function userverify() {		$this->load->library('form_validation');		$this->form_validation->set_rules('code', 'Code', 'required');		if($this->form_validation->run() == FALSE)		{			$this->index();		}		else		{			$code			= $this->input->post('code');            $email			= $this->input->post('email');			$authenticator  = new GoogleAuthenticator();			$checkResult 	= $authenticator->verifyCode($this->session->userdata('secret'), $code, 2);						if($checkResult)			{                $res = $this->user->getRow(array('email'=>$email));                $photo = base_url().$res->picture;                $sessionArray = array(                	'userId'=>$res->id,                    'user_type'=>$res->user_type,                    'roleText'=>$res->user_type,                    'user_photo'=>$photo,                    'user_id'=>$res->id,                    'email'=>$res->email,                    'notification_method'=>$res->notification_method,                    'company_id'=>$res->company_id,                    'name'=>$res->first_name.' '.$res->last_name,                    'last_check'=>time(),                	'isLoggedIn' => TRUE,                );                $this->session->set_userdata($sessionArray);                $activity_data["activity_type"] = "Login";                $activity_data["user_id"] = $res->id;                $activity_data["activity_message"] = $res->first_name.' '.$res->last_name." login successfully.";                	                $this->load->model('Activity_model');                $this->Activity_model->insert($activity_data);               				switch($this->session->userdata('user_type')) {					case "SuperAdmin":					case "Admin": {						redirect('/admin');					} break;					case "FASI": {						redirect('/fasi');					} break;					case "Company": {						redirect('/company');					} break;					case "Employee": {						redirect('/employee');					} break;				}			}			else {				$this->session->set_flashdata('error', $this->term['invalidcodeagain']);				redirect('/verification');			}		}		}	public function getqrinfo(){		$authenticator = new GoogleAuthenticator();		$secret = $authenticator->createSecret();		$email 	= $this->session->userdata('email');		$company_name = $this->getSettingValue('company_name');		if ($email) {			$this->session->set_userdata('verify_code', $secret);			$qrCodeUrl = $authenticator->getQRCodeGoogleUrl($email, $secret, $company_name);			$data["qrcodeurl"] = $qrCodeUrl;			$data["success"] = true;		}else			$data["success"] = false;		$this->response($data);	}	public function qrcheck() {		$code = $this->input->post('code');		$authenticator  = new GoogleAuthenticator();		$secret = $this->session->userdata('verify_code');		$checkResult 	= $authenticator->verifyCode($secret, $code, 2);		$data["success"] = $checkResult;		if ($checkResult) $data["qrsecret"] = $secret;		$this->response($data);	}}